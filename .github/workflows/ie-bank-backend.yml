name: ie-bank-backend

on:
  push:
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  contents: read
  id-token: write

env:
  BACKEND_WEBAPP_DEV: devious-be-dev
  BACKEND_WEBAPP_UAT: devious-be-uat
  ACR_NAME: deviousacrdev
  IMAGE_NAME: backend

jobs:
  build:

    runs-on: ubuntu-latest
    env:
      ENV: ghci

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
    - name: Upgrade pip
      run: |
        python -m pip install --upgrade pip
    - name: Install dependencies
      run: |
        pip install -r requirements.txt
    - name: Lint with flake8
      run: |
        pip install flake8 pytest
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with pytest
      run: |
        python -m pytest --cov=iebank_api -v
    - name: Upload artifact for deployment jobs
      uses: actions/upload-artifact@v4
      with:
        name: python-app
        path: |
          .
    - uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: 'Get ACR credentials from Key Vault'
      uses: azure/get-keyvault-secrets@v1
      with:
        keyvault: "devious-kv12-dev"
        secrets: 'registry-username, registry-password'
      id: keyvaultSecrets

    - name: 'Build and push image'
      uses: azure/docker-login@v1
      with:
        login-server: ${{ env.ACR_NAME }}.azurecr.io
        username: ${{ steps.keyvaultSecrets.outputs.registry-username }}
        password: ${{ steps.keyvaultSecrets.outputs.registry-password }}

    - name: Build and push container image
      run: |
        # Build and tag the image
        docker build . -t ${{ env.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}
        docker tag ${{ env.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }} ${{ env.ACR_NAME }}.azurecr.io/backend:${{ github.sha }}

        # Push all tags
        docker push ${{ env.ACR_NAME }}.azurecr.io/backend:${{ github.sha }}
        docker push ${{ env.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}

  deploy-dev:
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'Development'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    steps:
    - name: Download artifact from build job
      uses: actions/download-artifact@v4
      with:
        name: python-app
        path: .

    - uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: 'Deploy to Azure Web App Development'
      id: deploy-to-webapp
      uses: azure/webapps-deploy@v3
      with:
        app-name: ${{ env.BACKEND_WEBAPP_DEV }}
        images: ${{ env.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:latest
        startup-command: flask run --host=0.0.0.0 --port=8000
        
  run-postman-tests:
    runs-on: ubuntu-latest
    environment: 'UAT'  # Specify the environment name that matches what you created
    steps:
      - uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '16'
      - name: Install Newman
        run: npm install -g newman
      - name: Fetch Postman Collection
        run: |
          curl -L -o collection.json "https://api.postman.com/collections/${{ env.POSTMAN_COLLECTION_UID }}?apikey=${{ env.POSTMAN_API_KEY }}"
      - name: Fetch Postman Environment
        run: |
          curl -L -o environment.json "https://api.postman.com/environments/${{ env.POSTMAN_ENVIRONMENT_UID }}?apikey=${{ env.POSTMAN_API_KEY }}"
      - name: Run Newman Tests
        run: newman run collection.json -e environment.json

  deploy-uat:
    if: github.event.pull_request.base.ref == 'main' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    needs: [build, deploy-dev,run-postman-tests]
    environment:
      name: 'UAT'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    steps:
    - name: Download artifact from build job
      uses: actions/download-artifact@v4
      with:
        name: python-app
        path: .

    - uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: 'Deploy to Azure Web App UAT'
      id: deploy-to-webapp
      uses: azure/webapps-deploy@v3
      with:
        app-name: ${{ env.BACKEND_WEBAPP_UAT }}
        images: ${{ env.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:latest
        startup-command: flask run --host=0.0.0.0 --port=8000
